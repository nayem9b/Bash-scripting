kind create cluster --name devops
kubectl cluster-info
kubectl get nodes

docker exec -it <container id> bash
ps aux # show auxiliary process
kind create cluster --name devops --config=cluster.conf
kind get clusters
kind delete cluster --name devops
kubectl describe node <node name>
kubectl config get-contexts
pod = ephimeral
kubectl config set-context devops --config=cluster.conf
kubectl config use-contest <context name>
kubectl apply -f pod.yml
kubectl describe pod <pod name>
kubectl logs -f <pod name>
kubectl delete -f pod.yml
1 pod er vitore 1 ta container ideal
kubectl get deploy
kubectl get replicaset
"first-deploy-8df6bdcfb"-lt6cb this part is the replicaset name
kubectl rollout undo deployment/<deployment name>
kubectl rollout history deployment/<deployment name>
To get the deployment output in yaml 
    kubectl get deployment first-deploy -o yaml
*****Namespace 
    port
    backend in separate namespace
To get the pods in default namespace
    kubectl get pods --namespace default
kubectl config current-context

kubectl get nodes --show-labels
kubectl label node <node name> performance=high
kubectl describe pods

Taint/Tolerance
Taint: key value pairs with condition. Taint is set on Node. It will attract the pod with the matched toleration pod
Tolerance: Taint ke je tolerant korte parbe, tar dike tene nibe. Toleration is set on pod.

kubectl taint nodes <node name> gpu=true:NoSchedule
kubectl taint nodes devops-control-plane gpu=true:NoSchedule

DaemonSet creates pod in every node
kubectl logs -f <pod name>
kubectl get cronjobs
kubectl get jobs
kubectl port-forward pod/<pod name> port-that_I_want_in_my_machine:port_of_the_container
kubectl port-forward deploy/<deploy name> port-that_I_want_in_my_machine:port_of_the_container

Multiple containers in a same pod share the same network. So overlapping ports are not allowed
kubectl get services
kubectl get svc
kubectl describe endpointslice <service name>
kubectl port-forward svc/<service name> port-that_I_want_in_my_machine:port_of_the_containers -n (namespace name) default
kubectl logs -f deploy/<deploy name>
kubectl get endpointslice

Services are of 3 types:
1. Cluster Ip Service
2. Node Port
3. Load Balancer
1->2->3 are superset 
NodePort Range 30000-32767

path Types:
ImplementationSpecific, Exact, Prefix

kubectl get ingress
Namespace: process and network ke alada korar jonno use kora hoy.
kubectl get ingressclasses


Probe: Investigate the condition of container(s) of a pod
    - Liveness Probe
        - when liveness probe fails. It restarts the container
    - Readiness Probe
        - if a file or folder or process is ready then it executes
    - Startup Probe
        - pod startup howar somoy kaj kore
        - ensures that probe has properly started
kubectl exec -it <pod name> sh


configmap
    - stores the configuration which are not non-confidential
kubectl explain configmap
printenv
export NAME=devops
    - to save a file as an ENV variable
echo "Nayem" | base64
kubectl get secrets
Guarranted = Requests/ limits of pod and node are same.
Best Effort = limits are more than request
kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443

eyJhbGciOiJSUzI1NiIsImtpZCI6ImY0TFZVNmtfcmcxdWUxRlJUeTBER2VacW5qek5uUkdXUmliLUlWaEZxX1kifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNzM1MTc0NzEwLCJpYXQiOjE3MzUxNzExMTAsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwianRpIjoiYTVlNTllNjEtYTFiZi00ZDQ3LWEyZjktOGM1ODdiMjU4MDZhIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInVpZCI6ImY4M2RjNWQ3LWQ2YjYtNDQwYi04ZjlhLTYwMjk0Mjg0MzliNSJ9fSwibmJmIjoxNzM1MTcxMTEwLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQifQ.h2PuWR9ldkk6zGsSPuzkxSOLvYGXt0MGY0kP5w2J4wk4lK-9MO19wCdvFC2YJuBjIkQxU68cJM1ypveBxYaw6UFsuV2csVlOjuX15OE-LKXBnim_obCbkNO_JpqM0eizW9CTlradVcdvCF7C8D3GZpCZ-T2ZipePYEt1-w-7ryaf569tRmfiz7aGiJE2Xs0k3pZbvGm5RbSjnXQu_qZfI4dQCYyUXE4pn7VO9XYJ36-sPrwghAO1A37JYehz-ZyApyD9H38gEgGExpal8LCFXN2D7kXZspvle23_2OyOk3qGMI_KYRQ_NsFX1uVE2r9UMPjIaTDQWulS_C0kEOVYuQ